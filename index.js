/*
1.–°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ–∑–º—ñ—Ç–∫—É –Ω–∞—à–æ–≥–æ —Å–ª–æ—Ç—É 
2.–°—Ç–≤–æ—Ä—é—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é —è–∫–∞ –±—É–¥–µ –ø–µ—Ä–µ–º–∞–ª—å–æ–≤—É–≤–∞—Ç–∏ –Ω–∞—à—ñ —Å–∏–º–≤–æ–ª–∏ –ø—ñ–¥ —á–∞—Å —Å–ø—ñ–Ω—É
3.–ü—ñ—Å–ª—è —Å–ø—ñ–Ω—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –æ—Ç—Ä–∏–º–∞–Ω—ñ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó –Ω–∞ –≤–∏–≥—Ä–∞—à –∞–±–æ –ø—Ä–æ–≥—Ä–∞—à
---3.1 –ü—ñ—Å–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤–∏–≤–æ–¥–∏–º–æ –≤ –ø–æ–ª–µ –≤–∏–≥—Ä–∞—à —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —è–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ —Å–ø—ñ–≤–ø–∞–ª–æ —ñ —è–∫—â–æ —Å–ø—ñ–≤–ø–∞–ª–æ –≤—ñ—Ç–∞—î–º–æ –≤–∏ –≤–∏–≥—Ä–∞–ª–∏ 
4.–ü—ñ–¥—Å–≤—ñ—á—É—î–º–æ –≤–∏–≥—Ä–∞—à–Ω—É –ª—ñ–Ω—ñ—é 
---- 4.1 –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω–¥–µ–∫—Å –≤–∏–≥—Ä–∞—à–Ω–∏—Ö –ª—ñ–Ω—ñ–π –¥–æ–¥–∞—î–º–æ —ó—Ö –¥–æ –º–∞—Å–∏–≤—É
-----4.2 –ü—Ä–æ—Ö–æ–¥–∏–º–æ—Å—å –ø–æ –º–∞—Å–∏–≤—É —Ç–∞ –∑–º—ñ–Ω—é—î–º–æ –≤–ª–∞—Å–∏—Ç–∏–≤—ñ—Å—Ç—å –∫–æ–ª—å–æ—Ä—É —Ñ–æ–Ω—É 
5.–î–æ–¥–∞—î–º–æ —Å—É–º–º—É –±–∞–ª–∞–Ω—Å—É.
----- 5.1 –°—Ç–≤–æ—Ä—é—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ —Å—É–º–∞ —Å—Ç–∞–≤–∫–∏ –ø–æ –∫–ª—ñ–∫—É 
6. –°—Ç–≤–æ—Ä—é—î–º–æ –º–∏—Å–∞–≤ –≤–∏–≥—Ä–∞—à–Ω–∏—Ö –ª—ñ–Ω—ñ–π —Ç–∞ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∂–µ–Ω–Ω—è –∑–∞ –Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ —Å–∏–º–æ–≤–æ–ª—ñ–≤ 
*/
const symbols = ["üçí", "üçã", "üçâ", "üçá", "üîî", "‚≠ê", "7Ô∏è‚É£", "üçÄ"];
const symbolMultipliers = {
  "üçí": 0.5,
  "üçã": 1,
  "üçâ": 1.5,
  "üçá": 2,
  "üîî": 3,
  "‚≠ê": 4,
  "7Ô∏è‚É£": 5,
  "üçÄ": 8,
};

const results = document.querySelector(".results");
const balance = document.querySelector(".balance");
const stakeValue = document.getElementById("stake-value");
const minusbtn = document.querySelector('[data-action="decrement"]');
const plusbtn = document.querySelector('[data-action="increment"]');

let initialBalance = parseInt(balance.textContent); // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ–¥–Ω—É –∑–º—ñ–Ω–Ω—É –¥–ª—è –±–∞–ª–∞–Ω—Å—É
let startValueStake = 1;
const minStake = 1;

function updtStartvalue() {
  stakeValue.textContent = startValueStake;
}

minusbtn.addEventListener("click", function () {
  if (startValueStake > minStake) {
    startValueStake -= 1;
    updtStartvalue();
  }
  if (startValueStake <= minStake) {
    minusbtn.disabled = true;
  }
});

plusbtn.addEventListener("click", function () {
  startValueStake += 1;
  updtStartvalue();
  minusbtn.disabled = false;
});

document.getElementById("spin-button").addEventListener("click", () => {
  // –°–ø–æ—á–∞—Ç–∫—É –≥–µ–Ω–µ—Ä—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–ø—ñ–Ω–∞
  const reels = spinAllReels(symbols);
  console.log("Reels:", reels);
  initialBalance -= startValueStake; // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ–¥–Ω—É –∑–º—ñ–Ω–Ω—É
  balance.textContent = initialBalance;
  const slots = document.querySelectorAll(".slot span");

  // –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Å–ª–æ—Ç—É
  slots.forEach((slot, index) => {
    slot.style.top = "100px"; // –ó–º—ñ—â—É—î–º–æ –≤–≥–æ—Ä—É
    results.style.backgroundColor = "#ffffff";
    results.textContent = "";
    slot.parentNode.style.backgroundColor = "";

    setTimeout(() => {
      const reelIndex = Math.floor(index / 3);
      const positionIndex = index % 3;
      slot.textContent = reels[reelIndex][positionIndex];

      setTimeout(() => {
        slot.style.top = "25%";
      }, 50);
    }, 500);
  });

  setTimeout(() => {
    const winningIndices = checkWinningCombinations(reels);
    let totalWin = 0;
    if (winningIndices.length > 0) {
      winningIndices.forEach((lineIndex) => {
        const winningLine = getWinningLine(reels, lineIndex);
        const firstSymbol = winningLine[0];

        if (winningLine.every((symbol) => symbol === firstSymbol)) {
          const multiplier = symbolMultipliers[firstSymbol] || 1;
          totalWin += startValueStake * multiplier;
        }
      });

      initialBalance += totalWin;
      results.textContent = `WIN: ${totalWin} credits!`;
      results.style.backgroundColor = "#ffff00";
      highlightWinningLines(winningIndices);
    } else {
      results.style.backgroundColor = "#ff0000";
      results.textContent = "LOSS";
    }
    balance.textContent = initialBalance;
  }, 1000);
});

function spinReel(symbols, forceSymbol = null) {
  let reel = [];
  for (let i = 0; i < 3; i++) {
    if (forceSymbol && Math.random() > 0.55) {
      // 55% –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ—Ç—Ä–∏–º–∞—Ç–∏ –æ–¥–Ω–∞–∫–æ–≤–∏–π —Å–∏–º–≤–æ–ª
      reel.push(forceSymbol);
    } else {
      const randomSymbol = symbols[Math.floor(Math.random() * symbols.length)];
      reel.push(randomSymbol);
    }
  }
  return reel;
}

function spinAllReels(symbols) {
  const reels = [];
  const forcedSymbol = symbols[Math.floor(Math.random() * symbols.length)];
  for (let i = 0; i < 3; i++) {
    reels.push(spinReel(symbols, forcedSymbol));
  }
  return reels;
}

function checkWinningCombinations(reels) {
  const winningLines = [
    [reels[0][0], reels[1][0], reels[2][0]],
    [reels[0][1], reels[1][1], reels[2][1]],
    [reels[0][2], reels[1][2], reels[2][2]],
    [reels[0][0], reels[1][1], reels[2][2]],
    [reels[0][2], reels[1][1], reels[2][0]],
  ];

  const winningIndices = [];

  for (let i = 0; i < winningLines.length; i++) {
    if (winningLines[i].every((symbol) => symbol === winningLines[i][0])) {
      winningIndices.push(i);
    }
  }
  return winningIndices;
}

// –î–æ–¥–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é getWinningLine
function getWinningLine(reels, lineIndex) {
  const lineMappings = [
    [0, 3, 6], // –í–µ—Ä—Ö–Ω—è –ª—ñ–Ω—ñ—è
    [1, 4, 7], // –°–µ—Ä–µ–¥–Ω—è –ª—ñ–Ω—ñ—è
    [2, 5, 8], // –ù–∏–∂–Ω—è –ª—ñ–Ω—ñ—è
    [0, 4, 8], // –î—ñ–∞–≥–æ–Ω–∞–ª—å –∑–ª—ñ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ
    [2, 4, 6], // –î—ñ–∞–≥–æ–Ω–∞–ª—å —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª—ñ–≤–æ
  ];

  return lineMappings[lineIndex].map(
    (index) => reels[Math.floor(index / 3)][index % 3]
  );
}

function highlightWinningLines(winningIndices) {
  const slotElements = document.querySelectorAll(".slot span");
  const lineMappings = [
    [0, 3, 6],
    [1, 4, 7],
    [2, 5, 8],
    [0, 4, 8],
    [2, 4, 6],
  ];

  winningIndices.forEach((lineIndex) => {
    lineMappings[lineIndex].forEach((index) => {
      slotElements[index].parentNode.style.backgroundColor = "#ffff00";
    });
  });
}
